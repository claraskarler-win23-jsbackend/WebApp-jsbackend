@page "/signin"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using WebApp.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager


<PageTitle>Sign In</PageTitle>

<section id="signin">
    <div class="container">
        <EditForm Model="Input" id ="form" method="post" OnValidSubmit="LoginUser" FormName="signup">
            <DataAnnotationsValidator />
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger">
                    @ErrorMessage
                </div>
            }

            <h1>Welcome Back</h1>
            <p>Don't have an account yet? <a href="/signup">Sign up here</a></p>

            <div class="content">

                <div id="form-email" class="input-group">
                    <label>Email</label>
                    <InputText type="email" @bind-Value="Input.Email" class="form-control" autocomplete="email" aria-required="true" placeholder="Enter your email address" />

                </div>
                <div id="form-password" class="input-group">
                    <label>Password</label>
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Enter your password" />

                </div>
                <div id="form-remember" class="checkbox form-floating mb-3">
                    <div class="checkbox-group">
                        <InputCheckbox type="rememberme" @bind-Value="Input.RememberMe" autocomplete="rememberme"/>
                        <label>Remember Me</label>
                    </div>
                </div>

                <button id="form-button" class="btn-theme-s" type="submit">Sign In</button>

                <a id="form-forgot-password" href="/forgot">Forgot your password?</a>
            </div>
        </EditForm>
    </div>
</section>

@code {

    private string? ErrorMessage { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            NavigationManager.NavigateTo(ReturnUrl ?? "/");
        }
        else
        {
            ErrorMessage = "Incorrect email or password";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
