@page "/courses"
@attribute [StreamRendering]
@attribute [Authorize]


<PageTitle>Courses</PageTitle>

<section class="courses">
    <div class="container">
        <h1>Courses</h1>

        @* <form id="form-filters">
            <select>
                <div class="selected">All categories</div>
                <div class="select-options">
                    <div class="option" data-value="all">All categories</div>
                    @if (Model.Categories != null)
                    {
                        foreach (var category in Model.Categories)
                        {
                            <div class="option" data-value="@category.CategoryName">@category.CategoryName</div>
                        }
                    }
                </div>
            </select>
        </form> *@



        <div class="course-items">
            @if (courses == null)
            {
                <p><em>Loading...</em></p>
            }
            else {
            @foreach (var course in courses)
            {
                <div class="course-box">
                    <a class="course">
                        @if (course.IsBestseller)
                        {
                            <div class="bestseller">Best Seller</div>
                        }
                        <button class="bookmark"><i class="fa-regular fa-bookmark"></i></button>
                        <img src="~/images/courses/@course.Image" alt="@course.Title" />

                        <div class="content">
                            <h5 class="title">@course.Title</h5>
                            <p class="author">@course.Author</p>

                            <div class="pricing">
                                @if (!string.IsNullOrEmpty(course.DiscountPrice))
                                {
                                    <div class="discount">@course.DiscountPrice</div>
                                }
                                <div class="original @(!string.IsNullOrEmpty(course.DiscountPrice) ? "discount-enabled" : "")">@course.OriginalPrice</div>
                            </div>
                            <div class="footer">
                                <div class="hours">
                                    <i class="fa-regular fa-clock"></i>@course.Hours hours
                                </div>
                                <div class="likes">
                                    <i class="fa-regular fa-thumbs-up"></i>@course.LikesInPercent (@course.NumberOfLikes)
                                </div>

                            </div>
                        </div>
                    </a>

                </div>


            }
            }
        </div>

    </div>
</section>

@code {
    private CourseModel[]? courses;
    protected override async Task OnInitializedAsync()
    { 
        //gå till servern / apiet och hämta kurserna här
        try
        {
            courses = await Http.GetFromJsonAsync<CourseModel[]>(Environment.GetEnvironmentVariable("COURSES_URI"));
        }
        catch (Exception ex)
        {
            
        }
    }

    private  class CourseModel
    {
        public string Id { get; set; } = null!;
        public string Title { get; set; } = null!;
        public string? Image { get; set; }
        public string Author { get; set; } = null!;
        public bool IsBestseller { get; set; }
        public bool IsDigital { get; set; }
        public int Hours { get; set; }
        public string? LikesInPercent { get; set; }
        public string? NumberOfLikes { get; set; }
        public string OriginalPrice { get; set; } = null!;
        public string? DiscountPrice { get; set; }
        public string? Category { get; set; } = null!;

    }
}

